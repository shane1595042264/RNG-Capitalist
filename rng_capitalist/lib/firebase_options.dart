// File generated by FlutterFire CLI - SECURED with Environment Variables
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions get web => FirebaseOptions(
    apiKey: dotenv.env['FIREBASE_API_KEY_WEB'] ?? _throwMissingKey('FIREBASE_API_KEY_WEB'),
    appId: dotenv.env['FIREBASE_APP_ID_WEB'] ?? _throwMissingKey('FIREBASE_APP_ID_WEB'),
    messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID'] ?? _throwMissingKey('FIREBASE_MESSAGING_SENDER_ID'),
    projectId: dotenv.env['FIREBASE_PROJECT_ID'] ?? _throwMissingKey('FIREBASE_PROJECT_ID'),
    authDomain: '${dotenv.env['FIREBASE_PROJECT_ID'] ?? 'your-project'}.firebaseapp.com',
    storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET'] ?? _throwMissingKey('FIREBASE_STORAGE_BUCKET'),
    measurementId: dotenv.env['FIREBASE_MEASUREMENT_ID'] ?? _throwMissingKey('FIREBASE_MEASUREMENT_ID'),
  );

  static FirebaseOptions get android => FirebaseOptions(
    apiKey: dotenv.env['FIREBASE_API_KEY_ANDROID'] ?? _throwMissingKey('FIREBASE_API_KEY_ANDROID'),
    appId: dotenv.env['FIREBASE_APP_ID_ANDROID'] ?? _throwMissingKey('FIREBASE_APP_ID_ANDROID'),
    messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID'] ?? _throwMissingKey('FIREBASE_MESSAGING_SENDER_ID'),
    projectId: dotenv.env['FIREBASE_PROJECT_ID'] ?? _throwMissingKey('FIREBASE_PROJECT_ID'),
    storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET'] ?? _throwMissingKey('FIREBASE_STORAGE_BUCKET'),
  );

  static FirebaseOptions get ios => FirebaseOptions(
    apiKey: dotenv.env['FIREBASE_API_KEY_IOS'] ?? _throwMissingKey('FIREBASE_API_KEY_IOS'),
    appId: dotenv.env['FIREBASE_APP_ID_IOS'] ?? _throwMissingKey('FIREBASE_APP_ID_IOS'),
    messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID'] ?? _throwMissingKey('FIREBASE_MESSAGING_SENDER_ID'),
    projectId: dotenv.env['FIREBASE_PROJECT_ID'] ?? _throwMissingKey('FIREBASE_PROJECT_ID'),
    storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET'] ?? _throwMissingKey('FIREBASE_STORAGE_BUCKET'),
    iosBundleId: 'com.example.rngCapitalist',
  );

  static FirebaseOptions get macos => FirebaseOptions(
    apiKey: dotenv.env['FIREBASE_API_KEY_MACOS'] ?? _throwMissingKey('FIREBASE_API_KEY_MACOS'),
    appId: dotenv.env['FIREBASE_APP_ID_MACOS'] ?? _throwMissingKey('FIREBASE_APP_ID_MACOS'),
    messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID'] ?? _throwMissingKey('FIREBASE_MESSAGING_SENDER_ID'),
    projectId: dotenv.env['FIREBASE_PROJECT_ID'] ?? _throwMissingKey('FIREBASE_PROJECT_ID'),
    storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET'] ?? _throwMissingKey('FIREBASE_STORAGE_BUCKET'),
    iosBundleId: 'com.example.rngCapitalist',
  );

  static FirebaseOptions get windows => FirebaseOptions(
    apiKey: dotenv.env['FIREBASE_API_KEY_WINDOWS'] ?? _throwMissingKey('FIREBASE_API_KEY_WINDOWS'),
    appId: dotenv.env['FIREBASE_APP_ID_WINDOWS'] ?? _throwMissingKey('FIREBASE_APP_ID_WINDOWS'),
    messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID'] ?? _throwMissingKey('FIREBASE_MESSAGING_SENDER_ID'),
    projectId: dotenv.env['FIREBASE_PROJECT_ID'] ?? _throwMissingKey('FIREBASE_PROJECT_ID'),
    authDomain: '${dotenv.env['FIREBASE_PROJECT_ID'] ?? 'your-project'}.firebaseapp.com',
    storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET'] ?? _throwMissingKey('FIREBASE_STORAGE_BUCKET'),
    measurementId: dotenv.env['FIREBASE_MEASUREMENT_ID'] ?? _throwMissingKey('FIREBASE_MEASUREMENT_ID'),
  );

  static String _throwMissingKey(String keyName) {
    print('‚ùå ERROR: Missing Firebase configuration: $keyName');
    print('Please check your .env file and ensure all Firebase keys are set');
    throw Exception('Missing Firebase configuration: $keyName not found in .env file. Please check your environment setup.');
  }
}
